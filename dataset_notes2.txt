Вещи которые надо знать когда переписываем большие системы. Есть статья на тему чем чревато переписывание большого проекта с нуля.big bang-переписывания
Модернизация старого PHP-приложения. Прежде чем переписывать лучше задуматься а так ли плох старый код связанное чтиво: Вещи которые надо знать когда переписываем большие системы
Процесс изучения ошибок и внесения изменений в код может быть сложным и требовать контроля над кодом. (Ctrl-Alt-Del учимся любить легаси-код)
Переписывание легаси кода, который на протяжении 10 лет работает, зачастую является ошибкой, так как писать код всегда легче чем чистать, и не учитыывает всей сложности приложения. (Ctrl-Alt-Del учимся любить легаси-код)
Когда вы уже разобрались в коде, не бойтесь начать его чистить и удалять ненужные сегменты (Ctrl-Alt-Del учимся любить легаси-код)
Места которые нужно посетить: Храм Лотоса (Индия), Телевышка Скай Тауэр (Новая Зеландия)
Идеи. telegram бот как почтовое приложение Yandex почты для уведомлений о письмах на почте. Технологии: imap, telegram API, golang, Yandex API
Магическое мышление. Виды магического мышления: 1. Одухотворение неодушевленных предметов 2. Вера в магические амулеты, талисманы и зелья 3. Предсказание будущих событий 4. Вера в потусторонние силы
Магическое мышление. Типы магического мышления: 1. Гомеопатическая магия 2. Контагиозная магия 3. Магия мысли 4. Магия соприкосновения 5. Феномен «справедливой Вселенной»
КИНТ Документация. По логике у нас есть WP (она же система ) он по API связывается с SOAP системы KintAPI (является посредником между КУС системой 1C)
КИНТ Документация. GetAvailableRooms - метод принимает даты от и до, что не удобно и скорее всего будет нести за собой последствия нагрузки на сервер, предложение оставить крон но поставить на раз в 1 минут (меньше нельзя), но по триггеру, то есть условно если была произведена бронь то надо запросить данные в фоне на свободные номера и за кэшировать на сайте результаты, нет нужды каждый раз при запросе шахматки запрашивать свободные адреса. Так три зайца убьем, и сайт с 1c не нагрузим и от дудос защитимся, и данные обновим! 
Идеи. Проект по созданию образовательных курсов, лекций, встреч и того подобного, в целях изучать что либо, своего рода уникальный сервис обучения
Криптография. В общем и целом это защита информации от чего-либо (чтение или изменение). В криптографии есть три ключевых понятия Шифрование, Хеширование и Цифровая подпись (как гибрид хеширования и шифрования данных), не исключаю что есть и другие понятия. Пока знаком только с ними.
Отличия шифрования и хеширования. Главными отличием является то что шифрование обратимо, хеширование нет. Если хеш обратим значит хеш взломан и не криптостойкий. А так же шифр имеет ключ для расшифровка сообщений, сейчас длина этого ключа считается стойкой от 1024 бит, шифры с одним ключ для шифрования и расшифрования называются симметрическим шифром, с двумя ключами называется асимметрическим шифром, это конечно не полная классификация.
Шифрование. Шифрование - это процесс преобразование обычного текста в то, что, как представляется, является случайными и бессмысленным. (шифр) Шифрование происходит по ключу. Ключ из себя представляет набор бит. Минимальная длина которая сегодня является безопасной - 256 бит, а стандартом является 1024 и 2048 бит
Симметричное шифрование. Шифрование построенное на одном ключе (закрытый ключ), который ни кому нельзя сообщать, так как по данному ключу можно, как зашифровать сообщение, так и расшифровать его.
Алгоритмы симетричного шифорвания. Блочные алгоритмы шифрования: 1. AES 2. DES 3. 3DES - 3 раза DES Потоковые алгоритмы шифрования: 1. RC4
Асимметрическое шифрование. Шифрование построенное на двух ключах, открытом ключе и закрытом ключе, закрыты хранится у пользователя, а открытый дается всем кому он нужен, с помощью открытого ключа могут расшифровать сообщение, но не могут его зашифровать
namespace - это свобода от include, global и удобства использования. Использование namespace не решение всех проблем, namespace - это в большей степени удобство и красота написаного кода, и плацдарм для технологий позволяющих творить ~магию~ (Dependency Injection Containter один из примеров магии для разработчика об этом далее).
Реализация include. Использование include не является чем-то запрещенным и плюсы от использования не терпят ни какой критики, однако это не удобно, чтобы подключить надо знать полный путь до файла, и не мало того, если там класс, нужна еще инициализация класса, а для этого надо знать еще и название класса. 
Недостатки include. Из недостатков мы одинаково назвали файлы и классы в этих файлах, но вынуждены писать дважды одно и тоже слово. А также нам необходимо каждый раз подключать файлы с классами или функционалом, что не очень то удобно когда файлов 100 или больше, а не 2-3 как в примере. Помимо этого если названия классов пересикаются и при этом в разных файлах, мы получим ошибку о том что назване класса уже используется, и ни какой include_once не спасет.
Реализация с namespace. Namespace решает эти проблемы include, и не накладывает ограничений на содержимое файлов и структуру папок (если не использовать стандарты PSR, об этом ниже). И да namespace не работают без include, это не замена, а дополнение :)
Недостатки namespace. Из минусов то что эти полные названия нужно прописывать, чтобы получить доступ к классу, и это решается через конструкцию **use**, и код становится в разы читабельнее, при этом вывод в консоль будет тот же.
Стандарты namespace. Есть сторонние реализации автоподгрузки, и даже есть два стандарта по автоподгрузке PSR-0 и PSR-4. Первый позицианируют как автоподгрузка для библиотек сторонних разработчиков(папка vendor), в то время, как PSR-4 используется для автоподгрузки пользовательских библиотек или классов, оба эти стандарта есть в composer.
Реализация Alias с помощью namespace. Алиасы нужны для сокращения имен часто используемых класcов для быстрого доступа к ним, например, что бы постоянно не писать длинное название на подобии следующего `App\Http\Api\Collection\With\Repeat\One`, сложно воспользоваться возможностями PHP и сократить его до одного слова. За это отвечает функция `class_alias`.
Реализация Dependency Injection Container (DIC) c помощью namespace. DIC - контейнер где хранятся все экземпляры классов от которых зависят другие классы в приложении, есть еще Service Conteiner, который в отличии от DIC создает инстансы класса перед запуском программ, пример это $SESSION, Route, подключение к DB, он хранит все классы которые нужны для запуска и работы приложения. Но он так же, если его классы нуждаются в зависимостях может использовать DIC.
Типы внедрения зависимостей (DIC). Есть 4 типа внедрение зависимостей: 1. внедрение руками 2. внедрение через конструктор 3. внедрение через дополнительные методы 4. внедрение через параметры методов класса (с контейнером) (можно и свойств класса)
Внедрение зависимостей руками (DIC). Недостатки - постоянное создание классов руками, не исключено повторное создание классов, совмещение логики получения зависимостей с логикой метода. Из плюсов простота реализации.
Внедрение зависимостей через конструктор (DIC). Недостатки - постоянное создание классов руками, теперь повторное создание классов отсутствует, и теперь конструктор отвечает за логику получения зависимостей, таким образом мы отделили логику получения зависимостей от логики методов, но в тоже время загрязнили конструктор и класс дополнительной логикой.
Внедрение зависимостей через дополнительные методы (DIC). Недостатки - постоянное создание классов руками, теперь повторное создание классов отсутствует, и теперь дополнительные методы отвечает за логику получения зависимостей, таким образом мы возложил логику на дополнительные методы, но в тоже время мы загрязняем класс методами получения зависимостей.
Внедрение зависимостей через параметры методов класса (DIC). Данный подход позволяет передавать в параметры методов экземпляры классов указанного в них типа. Реализация заключается в том что мы через php Reflection просматриваем какие параметры требует от нас вызываемый метод и после чего создает инстансы нужных типов, если они еще не созданы ранее иначе берет уже имеющиеся, и передает как аргументы к методу. Недостатки сложность реализации, не возможность сборки без вызова через сторонний класс, тоесть при вызове метода на прямую не будут подгружаться зависимости.
Насчет оплаты обучения обращаться в единый деканат или в отдел платных образовательных услуг.
Система управления базами данных (СУБД) - это программное обеспечение, предназначенное для создания, управления, обновления и анализа баз данных.
Язык SQL состоит из нескольких частей (языков) DDL, DML, DCL, TCL
DDL - Data Definition Language (язык описания данных) состоит из команд CREATE, ALERT, DROP
DML - Data Manipulation Language (язык манипулирования данными) состоит из команд SELECT, INSERT, UPDATE, DELETE, MERGE
DCL - Data Control Language (язык управления данными) состоит из команд GRANT, REVOKE
Регулярные выражения - это механизм для поиска и замены по шаблону
Горутины в go это потоки, они конкуренты, а не паралельны. 
Каналы в go это способ общения горутин, они бывают буфиризированные и небуфиризированные, отличие в том что первый имеет буфер для сообщений и если буфер не заполнен то потоки не блокируются, а второй имеет буфер равный 0 и при каждом чтении или записи потоки блокируются
Неблокирующе чтение из канала в go. Используя конструкцию select-case, можно избежать блокирующего чтения из канала. Горутина прочитает из канала данные, если только они там есть, в противном случае выполняется блок default.
Неблокирующая запись в канал в go. Блокировки при записи в канал можно избежать, используя ту же самую конструкцию select-case.
Монолит - это не плохо, учитывая сколько он требует ресурсов на старте, совсем не удивительно, что для старта выбирают его.
Микросервисы - это очень сложная и ресурсо требовательная система, абы как к ней не подойти, иначе возникнут проблемы с декомпозицией и производительность, что может каскадно повлечь сбой всей системы, однако если все делать по уму, то модернизация и поддержка больщой системы будет в разы проще.
Фреймворки используют на спидах патерны проектирования, хочешь изучить патеры на новом уровне изучай фремворки. (laravel, lumen, symfony)
Надо учить базу, а не технологии. Например технолигии это язык программирования (js, php, go), а база это сеть (http), с помощью языка можно написать сайт, а зная устроен сеть, можно написать не только сайт, но и игры, мобильные приложения, десктопные приложения, микроконтроллеры, и все что работает с интернетом, так как подход один, а технологии разные. Примерами базы является (алгоритмика, архитектура, сеть, безопасность)
